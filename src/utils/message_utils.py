"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ Telegram.
"""

from typing import List, Dict, Any

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
MAX_MESSAGE_LENGTH = 4096


def truncate_message(text: str, max_length: int = MAX_MESSAGE_LENGTH) -> str:
    """
    –û–±—Ä–µ–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        
    Returns:
        –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º
    """
    if len(text) <= max_length:
        return text
    
    # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    truncated = text[:max_length-3] + "..."
    last_sentence_end = truncated.rfind('.')
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (80% –æ—Ç –ª–∏–º–∏—Ç–∞)
    if last_sentence_end > max_length * 0.8:
        return truncated[:last_sentence_end+1] + "..."
    
    return truncated


def format_anime_list(anime_items: List[Dict[str, Any]], category: str = "anime") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ –≤ –∫—Ä–∞—Å–∏–≤–æ–º –≤–∏–¥–µ.
    
    Args:
        anime_items: –°–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞–Ω–∏–º–µ (top, new, classic)
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not anime_items:
        return "–•–º... –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª."
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    category_emojis = {
        "top": "üî•",
        "new": "üÜï", 
        "classic": "üëë",
        "anime": "üì∫"
    }
    
    emoji = category_emojis.get(category, "üì∫")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    result = f"{emoji} –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n"
    
    for i, item in enumerate(anime_items, 1):
        title = item.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∞–Ω–∏–º–µ")
        year = item.get("year", "")
        rating = item.get("rating", "")
        description = item.get("description", "")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –∞–Ω–∏–º–µ
        anime_line = f"{i}. üèÜ {title}"
        if year:
            anime_line += f" ({year})"
        anime_line += "\n"
        
        if rating:
            anime_line += f"   ‚≠ê {rating}\n"
        
        if description:
            anime_line += f"   üìù {description}\n"
        
        anime_line += "\n"
        result += anime_line
    
    return result


def split_long_message(text: str, max_length: int = MAX_MESSAGE_LENGTH) -> List[str]:
    """
    –†–∞–∑–±–∏—Ç—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏.
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —á–∞—Å—Ç–∏
        
    Returns:
        –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    if len(text) <= max_length:
        return [text]
    
    parts = []
    current_part = ""
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    lines = text.split('\n')
    
    for line in lines:
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —á–∞—Å—Ç—å + –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
        if len(current_part) + len(line) + 1 > max_length:
            if current_part:
                parts.append(current_part.strip())
                current_part = ""
            
            # –ï—Å–ª–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ—ë
            if len(line) > max_length:
                while len(line) > max_length:
                    parts.append(line[:max_length])
                    line = line[max_length:]
                current_part = line
            else:
                current_part = line
        else:
            if current_part:
                current_part += '\n' + line
            else:
                current_part = line
    
    if current_part:
        parts.append(current_part.strip())
    
    return parts


def create_pagination_info(current_page: int, total_pages: int, total_items: int) -> str:
    """
    –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
    
    Args:
        current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        total_items: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    """
    if total_pages <= 1:
        return ""
    
    return f"\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∏–∑ {total_pages} ({total_items} –∞–Ω–∏–º–µ)"


def format_error_message(error_type: str = "general") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —Å—Ç–∏–ª–µ –°–∞–π—Ç–∞–º—ã.
    
    Args:
        error_type: –¢–∏–ø –æ—à–∏–±–∫–∏
        
    Returns:
        –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    error_messages = {
        "api": "–•–º... –ß—Ç–æ-—Ç–æ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
        "timeout": "–õ–∞–¥–Ω–æ, —Å–µ—Ä–≤–∏—Å —Ç–æ—Ä–º–æ–∑–∏—Ç. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ.",
        "rate_limit": "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ.",
        "general": "–•–º... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
    }
    
    return error_messages.get(error_type, error_messages["general"])
