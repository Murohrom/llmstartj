"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ /start –∏ /help.
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from src.utils.logger import logger
from src.utils.message_utils import format_error_message
from src.services.user_state_service import user_state_service
from src.services.llm_service import llm_service
from src.services.pagination_service import pagination_service

router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    
    logger.info(f"User {user_id} ({user_name}) sent /start command")
    
    welcome_text = (
        f"–õ–∞–¥–Ω–æ... –ü—Ä–∏–≤–µ—Ç, {user_name}.\n\n"
        "–Ø –°–∞–π—Ç–∞–º–∞, –∏ —Ç–µ–ø–µ—Ä—å –ø–æ–º–æ–≥–∞—é –ø–æ–¥–±–∏—Ä–∞—Ç—å –∞–Ω–∏–º–µ. "
        "–ù–µ —Å–∞–º–∞—è –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∞—è —Ä–∞–±–æ—Ç–∞, –Ω–æ –ª–∞–¥–Ω–æ...\n\n"
        "–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∏ —è –Ω–∞–π–¥—É —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
    )
    
    await message.answer(welcome_text)
    logger.info(f"Sent welcome message to user {user_id}")


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    
    logger.info(f"User {user_id} ({user_name}) sent /help command")
    
    help_text = (
        "–•–º... –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /start - –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "‚Ä¢ /reset - –∑–∞–±—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n"
        "‚Ä¢ /top - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–Ω–∏–º–µ\n"
        "‚Ä¢ /new - –Ω–æ–≤–∏–Ω–∫–∏ —Å–µ–∑–æ–Ω–∞\n"
        "‚Ä¢ /classic - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∞–Ω–∏–º–µ\n\n"
        "üí¨ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, –∫–∞–∫–æ–µ –∞–Ω–∏–º–µ –∏—â–µ—à—å –∏–ª–∏ —á—Ç–æ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è. "
        "–Ø –ø–æ–º–Ω—é –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—é —á—Ç–æ-—Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ \"–•–æ—á—É —á—Ç–æ-—Ç–æ —Å –¥—Ä–∞–∫–∞–º–∏\"\n"
        "‚Ä¢ \"–ò—â—É —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –∞–Ω–∏–º–µ\"\n"
        "‚Ä¢ \"–ü–æ–∫–∞–∂–∏ —á—Ç–æ-—Ç–æ —Å–º–µ—à–Ω–æ–µ\"\n\n"
        "–õ–∞–¥–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω–∞–ø–∏—Å–∞—Ç—å."
    )
    
    await message.answer(help_text, parse_mode="HTML")
    logger.info(f"Sent help message to user {user_id}")


@router.message(Command("reset"))
async def cmd_reset(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset - —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    
    logger.info(f"User {user_id} ({user_name}) sent /reset command")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await user_state_service.reset_user_state(user_id)
    
    reset_text = (
        "–û–∫–µ–π, –∑–∞–±—ã–ª —á—Ç–æ —Ç—ã —Ö–æ—Ç–µ–ª. –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.\n\n"
        "–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å."
    )
    
    await message.answer(reset_text)
    logger.info(f"Reset user state for user {user_id}")


@router.message(Command("top"))
async def cmd_top(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /top - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–Ω–∏–º–µ."""
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    
    logger.info(f"User {user_id} ({user_name}) sent /top command")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç" —Å—Ç–∞—Ç—É—Å
        await message.bot.send_chat_action(message.chat.id, "typing")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        response = await llm_service.generate_category_response("top", user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(response)
        
        logger.info(f"Sent top anime response to user {user_id}")
        
    except Exception as e:
        logger.error(f"Error in /top command for user {user_id}: {e}")
        await message.answer(format_error_message("api"))


@router.message(Command("new"))
async def cmd_new(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /new - –Ω–æ–≤–∏–Ω–∫–∏ —Å–µ–∑–æ–Ω–∞."""
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    
    logger.info(f"User {user_id} ({user_name}) sent /new command")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç" —Å—Ç–∞—Ç—É—Å
        await message.bot.send_chat_action(message.chat.id, "typing")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        response = await llm_service.generate_category_response("new", user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(response)
        
        logger.info(f"Sent new anime response to user {user_id}")
        
    except Exception as e:
        logger.error(f"Error in /new command for user {user_id}: {e}")
        await message.answer(format_error_message("api"))


@router.message(Command("classic"))
async def cmd_classic(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /classic - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∞–Ω–∏–º–µ."""
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    
    logger.info(f"User {user_id} ({user_name}) sent /classic command")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç" —Å—Ç–∞—Ç—É—Å
        await message.bot.send_chat_action(message.chat.id, "typing")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        response = await llm_service.generate_category_response("classic", user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(response)
        
        logger.info(f"Sent classic anime response to user {user_id}")
        
    except Exception as e:
        logger.error(f"Error in /classic command for user {user_id}: {e}")
        await message.answer(format_error_message("api"))


def get_categories_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∞–Ω–∏–º–µ"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ", callback_data="category_top"),
            InlineKeyboardButton(text="üÜï –ù–æ–≤–∏–Ω–∫–∏", callback_data="category_new")
        ],
        [
            InlineKeyboardButton(text="üëë –ö–ª–∞—Å—Å–∏–∫–∞", callback_data="category_classic"),
            InlineKeyboardButton(text="üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ", callback_data="category_personal")
        ]
    ])
    return keyboard


@router.callback_query(F.data.startswith("category_"))
async def handle_category_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    user_id = callback.from_user.id
    user_name = callback.from_user.first_name
    category = callback.data.replace("category_", "")
    
    logger.info(f"User {user_id} ({user_name}) clicked category: {category}")
    
    try:
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç" —Å—Ç–∞—Ç—É—Å
        await callback.bot.send_chat_action(callback.message.chat.id, "typing")
        
        if category == "personal":
            # –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥
            await callback.message.answer(
                "–õ–∞–¥–Ω–æ, —Ä–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –∏ —è –ø–æ–¥–±–µ—Ä—É —á—Ç–æ-—Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ."
            )
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            response = await llm_service.generate_category_response(category, user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await callback.message.answer(response)
        
        logger.info(f"Sent category response to user {user_id}")
        
    except Exception as e:
        logger.error(f"Error in category callback for user {user_id}: {e}")
        await callback.message.answer(format_error_message("api"))


@router.callback_query(F.data.startswith("page_"))
async def handle_pagination_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
    user_id = callback.from_user.id
    user_name = callback.from_user.first_name
    data = callback.data
    
    logger.info(f"User {user_id} ({user_name}) clicked pagination: {data}")
    
    try:
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer()
        
        if data == "page_info":
            # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            total_pages = await pagination_service.get_total_pages(user_id)
            if total_pages > 0:
                await callback.message.answer(f"üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}")
            return
        
        if data == "close_pagination":
            # –ó–∞–∫—Ä—ã—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            await pagination_service.clear_pagination(user_id)
            await callback.message.edit_text("–û–∫–µ–π, –∑–∞–∫—Ä—ã–ª —Å–ø–∏—Å–æ–∫.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page = int(data.replace("page_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_data = await pagination_service.get_page(user_id, page)
        if not page_data:
            await callback.message.answer("–•–º... –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        items = page_data["items"]
        category = page_data["category"]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        response_text = f"üì∫ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_data['current_page']} –∏–∑ {page_data['total_pages']}):\n\n"
        
        for i, item in enumerate(items, 1):
            title = item.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∞–Ω–∏–º–µ")
            year = item.get("year", "")
            rating = item.get("rating", "")
            description = item.get("description", "")
            
            response_text += f"{i}. üèÜ {title}"
            if year:
                response_text += f" ({year})"
            response_text += "\n"
            
            if rating:
                response_text += f"   ‚≠ê {rating}\n"
            
            if description:
                response_text += f"   üìù {description}\n"
            
            response_text += "\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        keyboard = await pagination_service.get_pagination_keyboard(user_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(response_text, reply_markup=keyboard)
        
        logger.info(f"Updated pagination for user {user_id}, page {page}")
        
    except Exception as e:
        logger.error(f"Error in pagination callback for user {user_id}: {e}")
        await callback.message.answer(format_error_message("general"))
