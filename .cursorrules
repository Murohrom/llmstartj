# Правила для Cursor IDE проекта LLM-ассистента для подбора аниме

## Общие правила кодирования
- Весь код пишется на Python 3.11+ с современным синтаксисом
- Используется aiogram 3.x для Telegram Bot API
- Асинхронное программирование обязательно
- Принципы KISS и YAGNI - максимальная простота
- Следовать структуре проекта из doc/vision.md

## Языковые настройки
- Все комментарии в коде на русском языке
- Переменные и функции на английском, но говорящие имена
- Сообщения об ошибках на русском языке
- Логи на русском языке

## Генерация коммитов
**ВАЖНО: Все коммиты должны быть на русском языке**

### Формат коммитов:
- Используй conventional commits на русском языке
- Примеры:
  - `feat: добавить обработку команды /start`
  - `fix: исправить ошибку кэширования запросов`
  - `docs: обновить документацию по API`
  - `refactor: упростить структуру обработчиков`
  - `style: исправить форматирование кода`
  - `test: добавить тесты для LLM сервиса`

### Шаблоны коммитов по типам:
- **feat:** добавить новую функциональность
- **fix:** исправить баг или ошибку
- **docs:** изменения в документации
- **style:** форматирование, отступы (без изменения логики)
- **refactor:** рефакторинг кода без изменения функциональности
- **test:** добавление или изменение тестов
- **chore:** технические задачи, обновление зависимостей

### Описание коммитов:
- Первая строка: краткое описание изменений (до 50 символов)
- Используй повелительное наклонение: "добавить", "исправить", "обновить"
- Если нужно, добавь подробное описание через пустую строку

### Примеры хороших коммитов:
```
feat: добавить команду /recommend для подбора аниме

Реализована основная функциональность бота:
- Обработка пользовательского запроса
- Интеграция с OpenRouter API  
- Кэширование ответов LLM
```

```
fix: исправить обработку ошибок API в LLM сервисе

- Добавлен retry с exponential backoff
- Улучшены сообщения об ошибках для пользователя
- Логирование всех API ошибок
```

## Стиль сообщений бота
Все ответы бота должны быть в стиле персонажа Сайтамы:
- Простые фразы: "Ладно...", "Хм...", "Окей..."
- Немного равнодушный тон, но полезные советы
- Прямые вопросы о предпочтениях

## Обработка ошибок
Сообщения об ошибках в стиле Сайтамы:
- "Хм... Что-то с интернетом. Попробуй еще раз."
- "Ладно, сервис тормозит. Подожди немного."

## Структура проекта
Следовать архитектуре из doc/vision.md:
```
src/
├── bot.py              # Точка входа
├── handlers/           # Обработчики команд/сообщений  
├── services/           # Бизнес-логика (LLM, кэш)
└── utils/              # Конфигурация, логи, промпты
```
