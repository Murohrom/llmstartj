#!/usr/bin/env python3
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é"""

import os
from pathlib import Path


def check_deploy_readiness():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –∫ –¥–µ–ø–ª–æ—é"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é...")
    
    errors = []
    warnings = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    required_files = [
        "requirements.txt",
        "src/bot.py",
        "src/utils/config.py",
        "src/utils/logger.py",
        "src/handlers/start.py",
        "src/handlers/anime.py",
        "src/services/llm_service.py",
        "src/services/cache_service.py"
    ]
    
    for file_path in required_files:
        if not Path(file_path).exists():
            errors.append(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"‚úÖ {file_path}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Dockerfile
    dockerfiles = ["Dockerfile", "Dockerfile.railway", "Dockerfile.railway.simple"]
    dockerfile_found = False
    
    for dockerfile in dockerfiles:
        if Path(dockerfile).exists():
            print(f"‚úÖ {dockerfile}")
            dockerfile_found = True
    
    if not dockerfile_found:
        errors.append("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω Dockerfile")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_file = Path(".env")
    if env_file.exists():
        print("‚úÖ .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω")
    else:
        warnings.append("‚ö†Ô∏è  .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    data_dir = Path("data")
    if data_dir.exists():
        print("‚úÖ –ü–∞–ø–∫–∞ data –Ω–∞–π–¥–µ–Ω–∞")
        cache_dir = data_dir / "cache"
        if cache_dir.exists():
            print("‚úÖ –ü–∞–ø–∫–∞ data/cache –Ω–∞–π–¥–µ–Ω–∞")
        else:
            warnings.append("‚ö†Ô∏è  –ü–∞–ø–∫–∞ data/cache –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (—Å–æ–∑–¥–∞—Å—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")
    else:
        warnings.append("‚ö†Ô∏è  –ü–∞–ø–∫–∞ data –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (—Å–æ–∑–¥–∞—Å—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "="*50)
    
    if errors:
        print("‚ùå –û–®–ò–ë–ö–ò:")
        for error in errors:
            print(f"  {error}")
        print()
    
    if warnings:
        print("‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
        for warning in warnings:
            print(f"  {warning}")
        print()
    
    if not errors and not warnings:
        print("üéâ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é!")
        return True
    elif not errors:
        print("‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é (–µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)")
        return True
    else:
        print("üí• –ü—Ä–æ–µ–∫—Ç –Ω–µ –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é")
        return False


if __name__ == "__main__":
    check_deploy_readiness()
